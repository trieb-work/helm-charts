global:
  # -- Global image pull secrets
  imagePullSecrets: []
  # -- Storage class to use for persistent volumes
  storageClass: ""
  # -- External Database URL (if not using internal PostgreSQL)
  databaseUrl: ""
  # -- Secret key for Django (required)
  secretKey: ""
  # -- External Redis URL (if not using internal Redis)
  redisUrl: ""
  # -- External Celery Redis URL (if not using internal Redis). Use /0 for general usage and /1 for Celery for example
  celeryRedisUrl: ""
  # -- Global image configuration for Saleor components
  image:
    # -- Global image repository for Saleor components
    repository: ghcr.io/saleor/saleor
    # -- Global image tag for Saleor components
    tag: "3.21.7"
    # -- Global image pull policy for Saleor components
    pullPolicy: IfNotPresent
  # -- Database configuration
  database:
    # -- External primary database URL
    primaryUrl: ""
    # -- External read replica URL
    replicaUrl: ""
    # -- Maximum number of database connections
    maxConnections: 150
    # -- Connection timeout in seconds
    connectionTimeout: 5
    # -- Database connection max age in seconds (0 to disable connection persistence)
    connMaxAge: 0
  # -- Global TLS certificate configuration
  tls:
    # -- Enable global TLS certificate
    enabled: false
    # -- Existing TLS secret name to use for all ingress resources
    secretName: ""

# -- Service Mesh Configuration
serviceMesh:
  enabled: false
  # -- Istio specific configuration
  istio:
    enabled: false
    api:
      # -- Circuit breaking settings
      circuitBreaker:
        enabled: false
        maxConnections: 100
      # -- Request timeout settings
      timeout:
        enabled: false
        http: 10s

# -- Common labels for all resources
commonLabels: {}

# -- Common annotations for all resources
commonAnnotations: {}

api:
  enabled: true
  replicaCount: 2

  extraEnv:
    # -- List of allowed hosts for Django. Must be exact hostnames, wildcards (*) are not supported.
    # For development, you can use ["*"] to allow all hosts (not recommended for production).
    - name: ALLOWED_HOSTS
      value: "*"
    # -- List of allowed client hosts for CORS. Must match the exact domain used to access the dashboard.
    - name: ALLOWED_CLIENT_HOSTS
      value: "*"

  service:
    type: ClusterIP
    port: 8000

  resources:
    requests:
      cpu: 1
      memory: 512Mi
    limits:
      memory: 1Gi

  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 4
    # Target CPU utilization percentage for scaling (optional)
    targetCPUUtilizationPercentage: 80
    # Target memory utilization percentage for scaling (optional)
    # targetMemoryUtilizationPercentage: 80

  securityContext:  

  podAnnotations:

  imagePullSecrets:

dashboard:
  enabled: true
  replicaCount: 1
  
  image:
    repository: ghcr.io/saleor/saleor-dashboard
    tag: "3.21.0"
    pullPolicy: IfNotPresent
  
  # Just to render the apps marketplace. You can't install apps from here, but you can easily add a "marketplace" URL on your own (it is just a JSON). Got replaced in more recend version with the "extensions"
  appsMarketplaceApiUrl: "https://apps.saleor.io/api/v2/saleor-apps"

  # Just to render the apps extensions. You can't install apps from here, but you can easily add a "extensions" URL on your own (it is just a JSON)
  appsExtensionsApiUrl: "https://apps.saleor.io/api/v2/saleor-apps"
  isCloudInstance: false
  
  extraEnv: []
  
  service:
    type: ClusterIP
    port: 80
  
  resources:
    requests:
      cpu: 250m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 256Mi
  
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  securityContext:
    runAsUser: 0
    runAsGroup: 0
  
# Worker deployment = exactly one beat scheduler and multiple celery workers  
worker:
  enabled: true
  replicaCount: 1
  
  extraEnv:
  
  resources:
    requests:
      cpu: 250m
      memory: 1024Mi
    limits:
      cpu: 500m
  
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  scheduler: 
    resources:
      requests:
        cpu: 250m
        memory: 200Mi
      limits:
        cpu: 300m
        memory: 400Mi

        
migrations:
  # -- Enable automatic database migrations after install/upgrade
  enabled: false
  # -- Additional environment variables specific to migrations
  extraEnv: []
  # -- Resource requirements for the migration job
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 200m
      memory: 512Mi
  # -- Node selector for the migration job
  nodeSelector: {}
  # -- Affinity settings for the migration job
  affinity: {}
  # -- Tolerations for the migration job
  tolerations: []

# Storage configuration for media and static files
storage:
  # S3-compatible storage configuration (AWS S3, MinIO, etc.)
  s3:
    enabled: false
    # S3 credentials - these will be stored in a secret
    credentials:
      accessKeyId: ""      # Example: "AKIAIOSFODNN7EXAMPLE"
      secretAccessKey: ""  # Example: "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
    
    # S3 bucket and domain configuration
    config:
      region: "us-east-1"  # S3 region, e.g., "us-east-1", "eu-central-1"
      
      # Static files configuration (CSS, JS, email templates)
      staticBucketName: ""    # Example: "my-saleor-static"
      customDomain: ""        # Example: "static.saleor.example.com" or "d1234.cloudfront.net"
      
      # Media files configuration (product images, category images)
      mediaBucketName: ""     # Example: "my-saleor-media"
      mediaCustomDomain: ""   # Example: "media.saleor.example.com" or "d5678.cloudfront.net"
      
      # Private files configuration (webhook payloads, private data)
      mediaPrivateBucketName: "" # Example: "my-saleor-private"
      
      # Access control and URL settings
      defaultAcl: ""  # Options: "private", "public-read"
      queryStringAuth: false     # Enable signed URLs for media access
      queryStringExpire: 3600    # Signed URLs expiration in seconds (1 hour)
      endpointUrl: ""          # Custom S3 endpoint URL for non-AWS S3-compatible storage

  # Google Cloud Storage configuration
  gcs:
    enabled: false
    # GCS credentials - these will be stored in a secret
    credentials:
      # Provide JSON key file content directly
      jsonKey: ""  # Example: '{"type": "service_account", "project_id": "your-project-id", ...}'
    
    # GCS bucket configuration
    config:
      
      # Static files configuration (CSS, JS, email templates)
      staticBucketName: ""    # Example: "my-saleor-static"
      customEndpoint: ""      # Example: "https://storage.googleapis.com" (optional)
      
      # Media files configuration (product images, category images)
      mediaBucketName: ""     # Example: "my-saleor-media"
      mediaCustomEndpoint: "" # Example: "https://storage.googleapis.com" (optional)
      
      # Private files configuration (webhook payloads, private data)
      mediaPrivateBucketName: "" # Example: "my-saleor-private"
      
      # Access control and URL settings
      defaultAcl: ""  # Options: "publicRead", leave empty for private
      queryStringAuth: false     # Enable signed URLs for media access
      queryStringExpire:   # Signed URLs expiration in seconds (1 day)

postgresql:
  enabled: true
  architecture: standalone
  auth:
    database: postgres
    postgresPassword:
    replicationPassword:
    existingSecret: postgresql-credentials
    secretKeys:
      adminPasswordKey: postgresql-password
      userPasswordKey: user-password
      replicationPasswordKey: replication-password

  primary:
    persistence:
      size: 8Gi
    resources:
      requests:
        cpu: 500m
        memory: 2Gi
    # shared_buffers: 25% of memory
    # maintenance_work_mem: It’s recommended to set this value higher than work_mem; this can improve performance for vacuuming
    extendedConfiguration: |
        work_mem = 64MB
        maintenance_work_mem = 256MB
        shared_buffers = 500MB
        temp_buffers = 16MB
        max_connections = 150    

  readReplicas:
    replicaCount: 1
    persistence:
      size: 8Gi
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
    # shared_buffers: 25% of memory
    # maintenance_work_mem: It’s recommended to set this value higher than work_mem; this can improve performance for vacuuming
    extendedConfiguration: |
        work_mem = 64MB
        maintenance_work_mem = 256MB
        shared_buffers = 250MB
        temp_buffers = 16MB
        max_connections = 150        

redis:
  # -- Enable internal Redis deployment. Disable, if you want to use a external Redis
  enabled: true
  # -- Redis architecture (standalone or replication)
  architecture: standalone
  auth:
    # -- Enable Redis password authentication
    enabled: true
    # -- Redis password (will be auto-generated if not provided)
    password: ""
    # -- Use existing secret containing Redis password
    existingSecret: ""
    # -- Key in existing secret that contains Redis password
    existingSecretPasswordKey: ""
  master:
    persistence:
      # -- Size of Redis master persistent volume
      size: 8Gi
    resources:
      requests:
        cpu: 100m
        memory: 128Mi

ingress:
  enabled: true
  className: ""
  # -- Common annotations for both API and Dashboard ingress
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  
  api:
    enabled: true
    # -- Additional annotations for API ingress
    annotations:
    # Optional: enable standard Let's Encrypt setup
    #  cert-manager.io/cluster-issuer: "letsencrypt-prod"
    # Allow bigger body sizes to upload images
      nginx.ingress.kubernetes.io/proxy-body-size: "20m"

    hosts:
      - host: chart-example.local
        paths:
          - path: /graphql/
            pathType: Prefix
          - path: /thumbnail/
            pathType: Prefix
          # This is important for the Saleor Apps to work with Saleor  
          - path: /.well-known/jwks.json
            pathType: ImplementationSpecific
    tls:
      - secretName: saleor-tls
        hosts:
          - chart-example.local

# Optional image pull secrets
imageCredentials:
  enabled: false
  registry: ""
  username: ""
  password: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podSecurityContext: {}

securityContext: {}

nodeSelector: {}

tolerations: []

affinity: {}