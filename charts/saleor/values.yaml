global:
  # -- Global image pull secrets
  imagePullSecrets: []
  # -- Storage class to use for persistent volumes
  storageClass: ""
  # -- External Database URL (if not using internal PostgreSQL)
  databaseUrl: ""
  # -- External Redis URL (if not using internal Redis)
  redisUrl: ""
  # Database configuration
  database:
    # -- External primary database URL
    primaryUrl: ""
    # -- External read replica URLs
    replicaUrls: []
    # -- Maximum number of database connections
    maxConnections: 150
    # -- Connection timeout in seconds
    connectionTimeout: 5

# -- Service Mesh Configuration
serviceMesh:
  enabled: false
  # -- Istio specific configuration
  istio:
    enabled: false
    api:
      # -- Circuit breaking settings
      circuitBreaker:
        enabled: false
        maxConnections: 100
      # -- Request timeout settings
      timeout:
        enabled: false
        http: 10s

# -- Common labels for all resources
commonLabels: {}

# -- Common annotations for all resources
commonAnnotations: {}

api:
  enabled: true
  replicaCount: 1

  image:
    repository: ghcr.io/saleor/saleor
    tag: "3.19.12"
    pullPolicy: IfNotPresent

  extraEnv:
    # -- List of allowed hosts for Django. Must be exact hostnames, wildcards (*) are not supported.
    # For development, you can use ["*"] to allow all hosts (not recommended for production).
    - name: ALLOWED_HOSTS
      value: "*"
    # -- List of allowed client hosts for CORS. Must match the exact domain used to access the dashboard.
    - name: ALLOWED_CLIENT_HOSTS
      value: "*"
    - name: DATABASE_URL
      valueFrom:
        secretKeyRef:
          name: postgresql-credentials  # Will be templated in deployment
          key: database-url

  service:
    type: ClusterIP
    port: 8000

  resources:
    requests:
      cpu: 250m
      memory: 512Mi
    limits:
      cpu: 1
      memory: 1Gi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80

dashboard:
  enabled: true
  replicaCount: 1
  
  image:
    repository: ghcr.io/saleor/saleor-dashboard
    tag: "3.19.12"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 80
  
  resources:
    requests:
      cpu: 250m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 256Mi
  
  securityContext:
    runAsUser: 0
    runAsGroup: 0
  
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80

worker:
  enabled: true
  replicaCount: 1
  
  image:
    repository: ghcr.io/saleor/saleor
    tag: "3.19.12"
    pullPolicy: IfNotPresent
  
  extraEnv:

  
  resources:
    requests:
      cpu: 250m
      memory: 1024Mi
    limits:
      cpu: 500m
  
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80

migrations:
  # -- Enable automatic database migrations after install/upgrade
  enabled: false
  # -- Additional environment variables specific to migrations
  extraEnv: []
  # -- Resource requirements for the migration job
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 200m
      memory: 512Mi
  # -- Node selector for the migration job
  nodeSelector: {}
  # -- Affinity settings for the migration job
  affinity: {}
  # -- Tolerations for the migration job
  tolerations: []

postgresql:
  enabled: true
  architecture: standalone
  auth:
    database: postgres
    postgresPassword:
    replicationPassword:
    existingSecret: postgresql-credentials  # Will be templated in deployment
    secretKeys:
      adminPasswordKey: postgresql-password
      userPasswordKey: user-password
      replicationPasswordKey: replication-password

  primary:
    persistence:
      size: 8Gi
    resources:
      requests:
        cpu: 100m
        memory: 256Mi

  readReplicas:
    replicaCount: 1
    persistence:
      size: 8Gi
    resources:
      requests:
        cpu: 100m
        memory: 256Mi

redis:
  enabled: true
  architecture: standalone
  auth:
    enabled: true
  master:
    persistence:
      size: 8Gi
    resources:
      requests:
        cpu: 100m
        memory: 128Mi

ingress:
  enabled: true
  className: ""
  # -- Common annotations for both API and Dashboard ingress
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  
  api:
    enabled: true
    # -- Additional annotations for API ingress
    annotations:
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
    hosts:
      - host: chart-example.local
        paths:
          - path: /graphql/
            pathType: Prefix
    tls:
      - secretName: saleor-api-tls
        hosts:
          - chart-example.local
  
  dashboard:
    enabled: true
    # -- Additional annotations for Dashboard ingress
    annotations:
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
      nginx.ingress.kubernetes.io/rewrite-target: /$2
    hosts:
      - host: chart-example.local
        paths:
          - path: /dashboard(/|$)(.*)
            pathType: ImplementationSpecific
    tls:
      - secretName: saleor-dashboard-tls
        hosts:
          - chart-example.local

# Optional image pull secrets
imageCredentials:
  enabled: false
  registry: ""
  username: ""
  password: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podSecurityContext: {}

securityContext: {}

nodeSelector: {}

tolerations: []

affinity: {}